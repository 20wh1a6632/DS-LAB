#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node*left;
	struct node*right;
};
struct node*root=NULL,*cur,*temp;
struct node*create(){
	cur=(struct node*)malloc(sizeof(struct node));
	printf("enter data");
	scanf("%d",&cur->data);
	cur->left=NULL;
	cur->right=NULL;
	if(root==NULL){
		root=cur;
	}
	else{
	temp=root;
	while(temp!=NULL){
		if(cur->data<temp->data && temp->left==NULL){
			temp->left=cur;
			return root;
		}
  		else if(cur->data<temp->data && temp->left!=NULL){
  			temp=temp->left;
  		}
		else if(cur->data>=temp->data && temp->right==NULL){
 			 temp->right=cur;
  			return root;
 		 }
		 else if(cur->data>=temp->data && temp->right!=NULL){
            temp= temp->right;
 		 }
	}
   }
return root;
}
void preorder(struct node*root){
	if(root!=NULL){
		printf("%d\n",root->data);
		preorder(root->left);
		preorder(root->right);
	}
}
void inorder(struct node*root){
      if(root!=NULL){
		  inorder(root->left);
          printf("%d\n",root->data);
          inorder(root->right);
      }
  }
void postorder(struct node*root){
     if(root!=NULL){
         postorder(root->left);
         postorder(root->right);
		 printf("%d\n",root->data);
     
     }
 }
int main(){
 int ch;
while(1){
	printf("\n1-create\n2-preoder\n3-inorder\n4-postorder\n5-exit\n");
	printf("enter choice");
	scanf("%d",&ch);
	switch(ch){
	case 1:create();
			break;
	case 2:preorder(root);
			break;
	case 3:inorder(root);
			break;
	case 4:postorder(root);
			break;
	case 5:exit(0);
	}
	}
}
\*output
1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice1
enter data34

1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice1
enter data21

1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice1
enter data49

1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice1
enter data12

1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice3
12
21
34
49

1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice2
34
21
12
49

1-create
2-preoder
3-inorder
4-postorder
5-exit
enter choice4
12
21
49
34

1-create
2-preoder
3-inorder
4-postorder
5-exit
5
*/
