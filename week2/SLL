#include<stdio.h>
#include<stdlib.h>
struct node{
int data;
struct node*link;
};
struct node*head=NULL,*temp,*temp1,*cur;
struct node*create(){
int n;
printf("enter number of nodes ");
scanf("%d",&n);
for(int i=0;i<n;i++){
    cur=(struct node*)malloc(sizeof(struct node));
    printf("enter data\n");
    scanf("%d",&cur->data);
    cur->link=NULL;
    if(head==NULL){
        head=cur;
    }
    else{
        temp=head;
        while(temp->link!=NULL){
            temp=temp->link;
        }
        temp->link=cur;
    }
    }
    return head;

}
struct node*insert_begin(int ele){
cur=(struct node*)malloc(sizeof(struct node));
cur->data=ele;
cur->link=head;
head=cur;
return head;
}
struct node*insert_end(int ele){
cur=(struct node*)malloc(sizeof(struct node));
cur->data=ele;
cur->link=NULL;
temp=head;
while(temp->link!=NULL){
temp=temp->link;
}
temp->link=cur;
return head;
}
struct node*insert_pos(int ele,int pos){
int c=1;
temp=head;
cur->data=ele;
while(c<pos-1){
temp=temp->link;
c++;
}
    cur->link=temp->link;
temp->link=cur;
return head;
}
struct node*delete_begin(struct node*head){
temp=head;
head=temp->link;
printf("deleted element is %d\n",temp->data);
free(temp);
return head;
}
struct node*delete_end(struct node*head){
temp=head;
temp1=temp;
while(temp->link!=NULL){
temp1=temp;
temp=temp->link;
}
temp1->link=NULL;
printf(" deleted element is %d\n",temp->data);
free(temp);
return head;
}
struct node*delete_pos(struct node*head,int pos){
temp=head;
int c=1;
while(c<pos){
temp1=temp;
temp=temp->link;
     c++;
}
temp1->link=temp->link;
printf("deleted element is %d\n",temp->data);
free(temp);
return head;
}
void display(){
temp=head;
while(temp!=NULL){
printf("%d\n",temp->data);
   temp=temp->link;      
}
}
void reverse_display(struct node*head){
if(head!=NULL){
 reverse_display(head->link);
printf("%d\n",head->data);
}
}
int search(struct node*head,int ele){
int c=1;
temp=head;
while(temp!=NULL){
if(ele==temp->data){
printf("element found at %d\n", c);
break;
}
else{
temp=temp->link;
c++;
}
}
}
struct node*sort(struct node*head){
temp=head;
int x;
while(temp!=NULL){
temp1=head;
while(temp1!=NULL){
if(temp1->data>temp1->link->data){
x=temp1->data;
temp1->data=temp1->link->data;
temp1->link->data=x;
}
else{
temp1=temp1->link;
}
}
temp=temp->link;
}
return head;
}
int main(){
int ch,ele,pos;
while(1){
printf("1-create \n 2-insert_begin \n 3-insert_end \n 4-insert_pos \n 5-delete_begin \n 6-delete_end \n 7-delete_pos \n  8-display \n 9-reverse_display \n 10-search \n 11-sort \n 12-exit");

printf("enter choice");
scanf("%d",&ch);
switch(ch){
case 1:
head=create();
break;
case 2:
scanf("%d",&ele);
head=insert_begin(ele);
break;
        case 3:
            scanf("%d",&ele);
              head=insert_end(ele);
              break;
          case 4:
            scanf("%d%d",&ele,&pos);
              head=insert_pos(ele,pos);
        break;
          case 5:
            head=delete_begin(head);
            break;
          case 6:
              head=delete_begin(head);
            break;
        case 7:            
scanf("%d",&ele);
            head=delete_pos(head,ele);
            break;
        case 8:
            display(head);
            break;
        case 9:
           reverse_display(head);
            break;
case 10:
scanf("%d",&ele);
pos=search(head,ele);
break;
case 11:
head=sort(head);
break;
case 12:
exit(0);
}
}
}


/*OUTPUT
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice1
enter number of nodes 4
enter data
3
enter data
9
enter data
5
enter data
1
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice2
7
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice3
2
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice5
deleted element is 7
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice6
deleted element is 3
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice7
2
deleted element is 5
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice8
9
1
2
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice9
1-create 
 2-insert_begin 
 3-insert_end 
 4-insert_pos 
 5-delete_begin 
 6-delete_end 
 7-delete_pos 
  8-display 
 9-reverse_display 
 10-search 
 11-sort 
 12-exitenter choice10
1
element found at 2
*/
